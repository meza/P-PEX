<?php

require_once 'PHPUnit/Framework.php';
require_once 'vfsStream/vfsStream.php';

require_once dirname(__FILE__).'/../../src/Pex/Exceptions/NoSuchConfigFileException.php';
require_once dirname(__FILE__).'/../../src/Pex/Exceptions/NoSuchConfigSectionException.php';
require_once dirname(__FILE__).'/../../src/Pex/ConnectionData.php';
require_once dirname(__FILE__).'/../../src/Pex/ConnectionDataFactory.php';

/**
 * Test class for ConnectionDataFactory.
 * Generated by PHPUnit on 2010-04-26 at 14:18:05.
 */
class ConnectionDataFactoryTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var ConnectionDataFactory instance
     */
    protected $object;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {

        $root = $this->_getVFSRoot();
        $this->_setUpRoot($root);
        $this->object = new ConnectionDataFactory($root);

    }//end setUp()


    /**
     * Sets up a virtual filesystem root
     *
     * @return string
     */
    private function _getVFSRoot()
    {
        vfsStreamWrapper::register();
        $dir = new vfsStreamDirectory('configroot');
        vfsStreamWrapper::setRoot($dir);
        return vfsStream::url('configroot');

    }//end _getVFSRoot()


    /**
     * Creates a demo configfile in the given root
     *
     * @param string $root path
     *
     * @return void
     */
    private function _setUpRoot($root)
    {
        $data = <<<EOT
[demo_server]
server   = http://your.demo.server
username = your_user
password = your_pass

[demo_backup_server]
server   = http://your.demo.server.backup
username = your_user2
password = your_pass2
EOT;
        file_put_contents($root.'/demo_server.ini', $data);

    }//end _setUpRoot()


    /**
     * We need to be sure that unexistent files are reported
     *
     * @expectedException NoSuchConfigFileException
     *
     * @return void;
     */
    public function testCreateConnectionDataWithNotExistingConf()
    {
        $this->object->createConnectionData('notexisting');

    }//end testCreateConnectionDataWithNotExistingConf()


    /**
     * We need to be sure that not existing sections are reported
     *
     * @expectedException NoSuchConfigSectionException
     *
     * @return void;
     */
    public function testCreateConnectionDataWithNotExistingSection()
    {
        $this->object->createConnectionData('demo_server', 'noSection');

    }//end testCreateConnectionDataWithNotExistingSection()


    /**
     * We need to test that the default config is loaded, when sections are not
     * used seamingly
     *
     * @return void
     */
    public function testCreateConnectionDataWithConfigOnly()
    {
        $expected = new ConnectionData();
        $expected->host     = 'http://your.demo.server';
        $expected->username = 'your_user';
        $expected->password = 'your_pass';
        $actual             = $this->object->createConnectionData('demo_server');

        $this->assertEquals($expected, $actual);

    }//end testCreateConnectionDataWithConfigOnly()


}//end class

?>

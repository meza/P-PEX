<?php
/**
 * HttpTest.php
 *
 * Holds the test class for the Http class
 *
 * PHP Version: 5.2.10
 *
 * @category File
 * @package  HTTP
 * @author   meza <meza@meza.hu>
 * @license  GPLv3 <http://www.gnu.org/licenses/>
 * @version  GIT: $Id$
 * @link     http://www.meza.hu
 */

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../src/Http/Http.php';

/**
 * Test class for Http.
 * Generated by PHPUnit on 2010-01-24 at 19:44:27.
 *
 * PHP Version: 5.2.10
 *
 * @category Test
 * @package  HTTP
 * @author   meza <meza@meza.hu>
 * @license  GPLv3 <http://www.gnu.org/licenses/>
 * @link     http://www.meza.hu
 */
class HttpTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Http
     */
    protected $object;

    /**
     * @var CurlBuilder mock
     */
    protected $curlBuilderMock;

    /**
     * @var Curl mock
     */
    protected $curlMock;

    /**
     * @var HttpParams mock
     */
    protected $httpParamsMock;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->curlBuilderMock = $this->getMock(
            'CurlBuilder',
            array('createCurl'),
            array(),
            '',
            false,
            false,
            false
        );
        $this->object = new Http($this->curlBuilderMock);

    }//end setUp()


    /**
     * Test the creation of the object wihtout the Curl object
     *
     * @expectedException Exception
     * @test
     *
     * @return viod
     */
    public function testConstructorWithoutDependencies()
    {
        $http = new Http();

    }//end testConstructorWithoutDependencies()


    /**
     * Tests the setCookieStore behaviour
     *
     * @test
     *
     * @return void
     */
    public function testSetCookieStore()
    {
        $this->object->setCookieStore();
        $this->assertAttributeEquals(
            'cookies.txt',
            '_cookieStore',
            $this->object,
            'The cookie store was not initialized properly'
        );

        $expected = 'other.txt';
        $this->object->setCookieStore($expected);
        $this->assertAttributeEquals(
            $expected,
            '_cookieStore',
            $this->object,
            'The cookie store was not changed to '.$expected
        );

    }//end testSetCookieStore()


    /**
     * Data provider for the testVerifySSL method
     *
     * @return array of argument arrays
     */
    public function verifySSLTestProvider()
    {
        return array(
                'emptyArg' => array(null),
                'forFalse' => array(false),
                'forTrue'  => array(true),
               );

    }//end verifySSLTestProvider()


    /**
     * Testing verifySSL behaviour
     *
     * @param mixed $expected bool for arguments, null for empty call
     *
     * @dataProvider verifySSLTestProvider()
     * @test
     *
     * @return void
     */
    public function testVerifySSL($expected)
    {
        if (null === $expected) {
            $this->object->verifySSL();
            $expected = false;
        } else {
            $this->object->verifySSL($expected);
        }

        $this->assertAttributeEquals(
            $expected,
            '_SSLVerifyHost',
            $this->object
        );
        $this->assertAttributeEquals(
            $expected,
            '_SSLVerifyPeer',
            $this->object
        );

    }//end testVerifySSL()


    /**
     * Data provider for the testFollowLocation method
     *
     * @return array of argument arrays
     */
    public function followLocationTestProvider()
    {
        return array(
                'emptyArg' => array(null),
                'forFalse' => array(false),
                'forTrue'  => array(true),
               );

    }//end followLocationTestProvider()


    /**
     * Testing followLocation behaviour
     *
     * @param mixed $expected bool for arguments, null for empty call
     *
     * @dataProvider followLocationTestProvider()
     * @test
     *
     * @return void
     */
    public function testFollowLocation($expected)
    {
        if (null === $expected) {
            $this->object->followLocation();
            $expected = true;
        } else {
            $this->object->followLocation($expected);
        }

        $this->assertAttributeEquals(
            $expected,
            '_followLocation',
            $this->object
        );

    }//end testFollowLocation()


    /**
     * Test request behaviour
     *
     * @test
     *
     * @return void
     */
    public function testRequest()
    {
        $expected = 'successful curl test call';

        $this->httpParamsMock = $this->getMock(
            'HttpParams',
            array(),
            array(),
            '',
            false,
            false,
            false
        );
        $this->curlMock       = $this->getMock('Curl', array('execute'));

        $this->curlBuilderMock->expects(
            $this->once()
        )->method('createCurl')->with(
            $this->equalTo($this->httpParamsMock),
            $this->equalTo(
                array(
                 'cookieStore'    => $this->readAttribute(
                     $this->object,
                     '_cookieStore'
                 ),
                 'followLocation' => $this->readAttribute(
                     $this->object,
                     '_followLocation'
                 ),
                 'SSLVerifyHost'  => $this->readAttribute(
                     $this->object,
                     '_SSLVerifyHost'
                 ),
                 'SSLVerifyPeer'  => $this->readAttribute(
                     $this->object,
                     '_SSLVerifyPeer'
                 ),
                 'verbose'        => false,
                 'returnTransfer' => true,
                )
            )
        )->will($this->returnValue($this->curlMock));

        $this->curlMock->expects(
            $this->once()
        )->method('execute')->will($this->returnValue($expected));

        $actual = $this->object->request($this->httpParamsMock);

        $this->assertEquals($expected, $actual);

    }//end testRequest()


}//end class

?>

<?php
/**
 * HttpTest.php
 *
 * Holds the test class for the Http class
 *
 * PHP Version: 5.2.10
 *
 * @category File
 * @package  HTTP
 * @author   meza <meza@meza.hu>
 * @license  GPLv3 <http://www.gnu.org/licenses/>
 * @version  GIT: $Id$
 * @link     http://www.meza.hu
 */

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../src/Http/Http.php';
require_once dirname(__FILE__).'/../../src/Http/Curl.php';

/**
 * Test class for Http.
 * Generated by PHPUnit on 2010-01-24 at 19:44:27.
 *
 * PHP Version: 5.2.10
 *
 * @category Test
 * @package  HTTP
 * @author   meza <meza@meza.hu>
 * @license  GPLv3 <http://www.gnu.org/licenses/>
 * @link     http://www.meza.hu
 */
class HttpTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Http
     */
    protected $object;

    /**
     * @var Curl mock
     */
    protected $curlMock;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->curlMock = $this->getMock('Curl',array(
            'setSSLVerifyHost',
            'setSSLVerifyPeer',
            'setReturnTransfer',
            'call',
            'setMethod',
            'setHeaders'
        ),array(),'');
        $this->object = new Http($this->curlMock);

    }//end setUp()


    /**
     * Test the creation of the object wihtout the Curl object
     * @expectedException Exception
     */
    public function testConstructorWithoutDependencies()
    {
        new Http();

    }


    public function requestProvider()
    {
        return array(
                array(
                        'www.a.com',
                        array(
                                'var1' => 'val1',
                                'var2' => 'val2',
                                'var3' => 'val3'
                        ),
                        Http::GET,
                        'no such domain'
                ),
                array(
                        'www.a.com',
                        array(
                                'var1' => 'val1',
                                'var2' => 'val2',
                                'var3' => 'val3'
                        ),
                        Http::POST,
                        'no such domain'
                )
        );
    }


    /**
     *
     * @dataProvider requestProvider()
     * @covers Http::request
     *
     * @param <type> $url
     * @param <type> $data
     * @param <type> $method
     * @param <type> $expected
     */
    public function testRequest($url, $data, $method, $expected)
    {
        $this->curlMock->expects($this->once())
                ->method('setSSLVerifyHost')
                ->with($this->equalTo(false));
        $this->curlMock->expects($this->once())
                ->method('setSSLVerifyPeer')
                ->with($this->equalTo(false));
        $this->curlMock->expects($this->once())
                ->method('setReturnTransfer')
                ->with($this->equalTo(true));

        $this->curlMock->expects($this->once())
                ->method('call')
                ->with(
                $this->equalTo($url),
                $this->equalTo($data),
                $this->equalTo((bool) $method)
                )
                ->will($this->returnValue($expected));

        $actual = $this->object->request($url, $data, $method);
        $this->assertEquals($expected, $actual);
    }


    public function methodProvider()
    {
        return array(
            array('put'),
            array('delete'),
            array('update'),
            array('search')
        );
    }

    /**
     * @dataProvider methodProvider()
     */
    public function testSetMethod($method)
    {
        $this->curlMock->expects($this->once())
                ->method('setMethod')
                ->with($method)
                ->will($this->returnValue(null));
        $this->object->setMethod($method);
    }

    public function testReturnCurl()
    {
        $actual = $this->object->returnCurl();
        $this->assertEquals($this->curlMock, $actual);
    }

    public function testAddHeader()
    {
        $headers = array(
            'key1'=>'val1',
            'key2'=>'val2'
        );

        $expected = array();
        foreach($headers as $key=>$value)
        {
            $this->object->addHeader($key, $value);
            $expected[]=$key.':'.(string) $value;
        }

        $this->curlMock->expects($this->once())
                ->method('setHeaders')
                ->with($this->equalTo($expected));
        
        $this->object->request('', '');

    }

}
?>
